" Adapted from Haskell vim now
" XXX This needs to be updated.

" Conceal {{{
" Use same color behind concealed unicode characters
hi clear Conceal

" Pretty unicode haskell symbols
let g:haskell_conceal_wide = 1
let g:haskell_conceal_enumerations = 1
let hscoptions="ùêíùêìùêÑùêåxRtBùîªw"

" }}}

" Hoogle {{{
" Hoogle the word under the cursor
nnoremap <silent> <leader>hh :Hoogle<CR>

" Hoogle and prompt for input
nnoremap <leader>hH :Hoogle

" Hoogle for detailed documentation (e.g. "Functor")
nnoremap <silent> <leader>hi :HoogleInfo<CR>

" Hoogle for detailed documentation and prompt for input
nnoremap <leader>hI :HoogleInfo

" Hoogle, close the Hoogle window
nnoremap <silent> <leader>hz :HoogleClose<CR>

" }}}

" Formatting {{{
" Use hindent instead of par for haskell buffers
"autocmd FileType haskell let &formatprg="hindent --tab-size 2 -XQuasiQuotes"

" Enable some tabular presets for Haskell
let g:haskell_tabular = 1

" Delete trailing white space on save
augroup whitespace
  autocmd!
  autocmd BufWrite *.hs :call DeleteTrailingWS()
augroup END

" }}}

"Completion, Syntax check, Lint & Refactor {{{

" Disable hlint-refactor-vim's default keybindings
let g:hlintRefactor#disableDefaultKeybindings = 1

" hlint-refactor-vim keybindings
map <silent> <leader>hr :call ApplyOneSuggestion()<CR>
map <silent> <leader>hR :call ApplyAllSuggestions()<CR>

" Fix path issues from vim.wikia.com/wiki/Set_working_directory_to_the_current_file
let s:default_path = escape(&path, '\ ') " store default value of 'path'
" Always add the current file's directory to the path and tags list if not
" already there. Add it to the beginning to speed up searches.
autocmd BufRead *
      \ let s:tempPath=escape(escape(expand("%:p:h"), ' '), '\ ') |
      \ exec "set path-=".s:tempPath |
      \ exec "set path-=".s:default_path |
      \ exec "set path^=".s:tempPath |
      \ exec "set path^=".s:default_path

" Haskell Lint
" For debugging neomake
" let g:neomake_logfile='/tmp/neomake.log'
nmap <silent> <leader>hl :Neomake hlint<CR>

function HlintEntryProcess(entry) abort
    " Postprocess hlint output to make it more readable as a single line
    let a:entry.text = substitute(a:entry.text, '\v(Found:)\s*\n', ' | \1', 'g')
    let a:entry.text = substitute(a:entry.text, '\v(Why not:)\s*\n', ' | \1', 'g')
    let a:entry.text = substitute(a:entry.text, '\v(Perhaps:)\s*\n', ' | \1', 'g')
    let a:entry.text = substitute(a:entry.text, '^No hints$', '', 'g')
    call neomake#postprocess#compress_whitespace(a:entry)
endfunction

let g:neomake_haskell_hlint_maker = {
        \ 'exe': 'hlint',
        \ 'postprocess': function('HlintEntryProcess'),
        \ 'args': [],
        \ 'errorformat':
            \ '%E%f:%l:%v: Error: %m,' .
            \ '%W%f:%l:%v: Warning: %m,' .
            \ '%I%f:%l:%v-%*\d: Suggestion: %m,' .
            \ '%I%f:(%l\,%v)-(%*\d\,%*\d): Suggestion: %m,' .
            \ '%C%m'
        \ }

" GHC errors and warnings
" XXX need to set makeprg
noremap <silent> <leader>hc :make<CR><CR>:copen<CR>

" }}}
