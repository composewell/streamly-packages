Copyright (c) 2022 Composewell Technologies

Press space bar on "+" sign to unfold a group, type zR to unfold all
Using this cheatsheet {{{~
==========================
* Use "/" to search
* When on a highlighted keyword press |CTRL-]| to get help on it
* Use |CTRL-t| to pop back to original place after a CTRL-]
* Use |gg| on any help page to go to the beginning of page, related areas
* Use ':syn off' to see the real syntax of this file
* Commands starting with "," or marked as CUSTOM are custom keybindings
  through configuration and not standard vim commands.
* Use Esc,h to show this cheat sheet in vim
}}}
General |help| {{{
===============
|online-help|       | |:viusage| |:helpgrep|
|notation|          | |key-notation|
|set-option|        | |:set|
|key-mapping|       | |map-commands| |map-listing|
|map-commands|      | :map<CR>
ALL COMMANDS      | :TAB :help<TAB>
}}}
Quitting {{{
============
Quit                  | Esc:q :wq :q! :qa :cq
}}}
Appearance {{{
Refresh                | ,r(edraw)
Indent guides          | ,ig ,ir
Colorschemes           | :colorscheme <tab>
                       | :set background=light/dark
}}}
|motion| {{{
==========
Mouse              | ,ma(ctive) ,mo(ff)
|cursor-motions|     | |h| |j| |k| |l| |gg| |G|
|scroll-down|        | |CTRL-E| |CTRL-D| |CTRL-F|
|scroll-up|          | |CTRL-Y| |CTRL-U| |CTRL-B|
|jump-motions|       | ||``| |CTRL-]| |CTRL-T| |CTRL-O| |CTRL-I|
|scroll-cursor|      | |zt| |zz| |zb|
|word-motions|       | |b| |w| |B| |W| |ge| |e| |gE| |E|
|left-right-motions| | |0| |^| |$| |-| |+|
|left-right-motions| | |g0| |gm| |g^| |g$| |gk| |gj|
|object-motions|     | |(| |)| |{| |}| |[[| |]]| |[|] |][|
|various-motions|    | |M| |H| |L| |%| g%
|indentwise|         | xy where x ∈ [ ] and y ∈ + - _ = %
|easymotion|         | ,,e ,,b ,,w
}}}
Search/Navigation {{{~
=====================
|search-commands|          | |gd| |gD| |/| |?| * g* |#| |g#|
Navigate errors (custom) | |[g| |]g| (language server)
clear highlight          | ,<CR>
CSCOPE                   | :cs help
CSCOPE                   | ,\ ,. ,/
tag under cursor         | |CTRL-]| CTRL-t
tag selection            | CTRL-]
}}}
Information {{{~
===============
|various-commands|  | |K|(show documentation)
|option-summary|    | 'keywordprg'
Hoogle            | ,hi ,hI ,hh ,hH ,hz
}}}
|Visual| Selection {{{
====================
|visual-use|
|visual-start| (select)       | |v| (Use arrow keys to select)
|visual-start| (select line)  | |V|
|visual-start| (select block) | |CTRL-V|

When in visual mode, select/reselect objects using these commands
(|visual-operators|). Prefix "a" means regular, "i" means inner object:

Word     | aw aW iw iW
Sentence | as is
Para     | ap ip
Block    | ab aB ib iB a< i< a[ i[
Tag      | at it
String   | a" i" a' i' a` i`

Operating on the selected area:

: command : operates only on the selected area
!<cmd> : Filter selected area through cmd i.e. run "cmd" with selected area 
         as stdin, and replace it with the output
=      : Filter selected area through "equalprg"

For example, !cat|wc -w replaces the selected line with count of words
in the line.

You can also use editing commands on the visual area, see the editing
sections below.
}}}
Editing {{{
===========
|inserting| |visual-operators| |change.txt| |undo-redo| |complex-repeat|

Switch to Command Mode    | |Esc|
Save file                 | Esc:w :wq :w!

|inserting|                 | |a| |A| |i| |I| |o| |O|
block insert on selection | A I
join next line            | J
join selected lines       | J
delete text               | |x| |dw| |dd| |D|
delete selection          | x d D
change text               | |r| |cw| |cc| |C| s S
change selection          | r c C s S
case toggle               | |~|
case convert selection    | |~| u U
indent                    | |>>| |<<|
indent selection          | > <
unicode-input             | CTRL-V u <codepoint>

|undo-redo|                 | |u| |CTRL-R|
undo-tree                 | ,u
repeat last cmd           | .
|complex-repeat|            | q{0-9a-zA-Z"}<keystrokes>q | @{0-9a-z".=*+} | @@

textwidth                 | :set tw=79
shiftwidth                | :set sw=4
edit empty area           | :set |virtualedit|=all
}}}
Copy/Paste {{{~
==============
|copy-move| |visual-operators|

copy selection       | |y| (on mouse/visual selection)
copy line            | |yy|
copy to clipboard    | "+y "*y "+p "*p (on any mouse/visual selection)
copy line range      | :1,10y :1,10y+ :1,10y*

paste after cursor   | |p|| (after any copy/delete commands)
paste before cursor  | |P| (after any copy/delete commands)
paste over selection | p (after selecting an area)

|option-summary|       | (:set) 'mouse' 'pt' 'paste'
}}}
Formatting {{{~
==============
|formatting|             | :[range]ce[nter] [width] |ce| |le| |ri|
|formatting|             | |gq| |gqq| |gw| |gww|
|visual-operators| (fmt) | gq (format selected to textwidth)
Format selected        | ,gf (using language server)
Haskell Formatting     | ,fmt ,tmf
|align|                  | ,a= ,a, ,a| ,ap(rompt)
|commentary|             | |gcc| |gc| |gcu|
|Tabular|                | e.g. :Tabularize ,/
|change-tabs|            | |:retab|
}}}
Files/Browsing {{{
==============
Edit file                           | :e ,e :e#
Tree browser                        | ,f ,F
Open file under cursor              | gf gF
Open file under cursor in new tab   | CTRL-W gf CTRL-W gF

Extension CTRL-P

List all cmds: :CtrlP<tab>
Open file/buf browser: ,<space> ,b<space>
In the browser:
  type the filename to match on prompt
  Autocomplete dir names on prompt: <Tab>
  Shift focus between prompt/list: Shift<Tab>
  Full path vs filename only: CTRL-d
  String vs regexp match: CTRL-r
  Exit: Esc, CTRL-c, CTRL-g
Open: <CR>
Open in new tab: CTRL-t
Open in vertical split: CTRL-v
Open in Horizontal split: CTRL-s
Create a file with parent dirs: CTRL-y
}}}
|buffers| {{{
===========
|buffer-list| |buffer-hidden|

List       | |:files| |:ls| |:buffers|
Navigate   | |:bprev| |:bnext| :bfirst :blast :bmod :b<buf number> :b<bufname>
Split      | :sb :sbprev :sbnext :sbfirst :sblast :sbmod :sball
Vert split | :vert :sball etc.
Delete     | |:bd|

BUFFERS (Custom)   | ,bp(revious) ,bn(ext) ,bd(elete*)
}}}
|windows|| {{{
===========
|opening-window|     | |:new| |:vnew| |:split| |:vsplit|
split-win          | ,sh ,sj ,sk ,sl
|opening-window|     | |:hide| | :hide buffer | :hide {cmd} | |:close| |:quit|
|opening-window|     | CTRL-W q(uit) c(lose) o(nly)
|window-move-cursor| | CTRL-W <arrow key>
window-move-cursor | <c-h> <c-j> <c-k> <c-l> (Custom)
|window-move-cursor| | CTRL-W w W h j k l p(revious) P(review) t(op) b(ottom)
|window-resize|      | CTRL-W + - < > = _ |
|window-moving|      | CTRL-W r R(otate) x(change) H J K L
|scrollbind|         | :set scrollbind(in each window)
quitall            | :qa
}}}
|tabpage|| {{{
===========
List all commands: :tab<TAB>

Open: :tabedit :tabnew :tab <cmd> :tabfind
Close: :tabclose :tabonly
Navigate: :tabs :tabfirst :tablast :tabprev :tabnext [N]gt
Move: :tabmove [+|-] [N]

Open all buffers in separate tabs: :tab ball
Open new or switch to alreadyopened tab: :tab drop <file>
}}}
|diff-mode|| {{{
===========
:vert diffsplit <filename>
:vert diffthis
:vert diffpatch <patchfile>

:diffupdate
:diffoff

:diffget do
:diffput dp

Move across diffs: [c ]c
Open all folds: ,zR

A diff buffer has the following set:
:set diff
:set scrollbind
:set cursorbind
:set scrollopt+=hor
:set nowrap
:set foldmethod=diff
}}}
|folding| {{{
===========
|fold-commands|       | |za| |zc| |zo| |zm| |zr| |zn|  |[z| |]z| |zj| |zk|
unfold              | space-bar
unfold all windows* | ,zR (custom)
}}}
Terminal {{{
============
|terminal|        | :terminal :term://top
                | :edit term://bash
                | :vsplit term://top
tmux            | ,rs (copy) ,rv (reset)
tmux (custom)   | CTRL-H ...
}}}
Quickfix {{{~
==========
|quickfix| (build)     | |:vimgrep| |:make|
|quickfix| (errors)    | |:copen| |:clist| |:cnext| |:cprev| |:cfirst| |:clast|
                     | :cc|[!] [nr]
|quickfix| (locations) | |:lopen| |:llist| |:lnext| |:lprev| |:lfirst| |:llast| 
                     | |:ll|[!] [nr]
}}}
Checking/Linting/Compiling {{{
==============================
spell check (Custom) | ,ss, ]s, [s, z=
hlint                | ,hl ,hr ,hR
GHCI                 | ,gh
Compile              | ,hc
}}}
Haskell Language Server {{{
===========================
|coc-nvim| | :CocDiagnostics
         | :CocList outline
         | :Coc<TAB> (for all commands options)

Wingman navigate holes  | [h ]h
Wingman fill holes      | ,n
Wingman refine          | ,i
Wingman use constructor | ,c
Wingman destruct        | ,d
Wingman destruct all    | ,a
}}}
GIT {{{
=======
GIT               | ,gs(tatus) ,gg(rep) ,gl ,gd(iff) ,g? ,gb(lame)
}}}
live html {{{
=============
script            | <script src='http://127.0.0.1:9001/js/socket.js'></script>
}}}

vim:foldlevel=0:foldmarker={{{,}}}:foldmethod=marker:tw=78:ts=8:ft=help:buftype=help:iskeyword=!-~,^*,^|,^",192-255:norl:
